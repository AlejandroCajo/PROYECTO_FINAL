/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package capaGUI;

import capaDatos.DetalleVenta;
import capaDatos.Persona;
import capaDatos.Producto;
import capaGUI.GestionProductos.ConexionSQLite;
import capaLogica.ControladoraLogica;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author lizan
 */
public class PuntoDeVenta extends javax.swing.JPanel {
    
    ControladoraLogica control = new ControladoraLogica();
    private DefaultTableModel modeloTablaCarrito;
    private Persona usuario;

    public PuntoDeVenta() {
        initComponents();
        prepararTablaCarrito();
        cargarProductosComboBox();

        SwingUtilities.invokeLater(() -> {
            MenuPrincipal ventana = (MenuPrincipal) SwingUtilities.getWindowAncestor(this);
            if (ventana != null) {
                this.usuario = ventana.getUsuarioActual();
            }
        });
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        PanelAgregarProducto = new javax.swing.JPanel();
        cmbProductos = new javax.swing.JComboBox<>();
        spinnerCantidad = new javax.swing.JSpinner();
        btnAgregarAlCarrito = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCarrito = new javax.swing.JTable();
        PanelTotales = new javax.swing.JPanel();
        lblTotalAPagar = new javax.swing.JLabel();
        btnFinalizarVenta = new javax.swing.JButton();
        btnQuitarProducto = new javax.swing.JButton();
        btnCancelarVenta = new javax.swing.JButton();

        btnAgregarAlCarrito.setText("Agregar al Carrito");
        btnAgregarAlCarrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarAlCarritoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelAgregarProductoLayout = new javax.swing.GroupLayout(PanelAgregarProducto);
        PanelAgregarProducto.setLayout(PanelAgregarProductoLayout);
        PanelAgregarProductoLayout.setHorizontalGroup(
            PanelAgregarProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAgregarProductoLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(PanelAgregarProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelAgregarProductoLayout.createSequentialGroup()
                        .addComponent(spinnerCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(83, 83, 83)
                        .addComponent(btnAgregarAlCarrito))
                    .addComponent(cmbProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(64, Short.MAX_VALUE))
        );
        PanelAgregarProductoLayout.setVerticalGroup(
            PanelAgregarProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelAgregarProductoLayout.createSequentialGroup()
                .addGap(69, 69, 69)
                .addComponent(cmbProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(PanelAgregarProductoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarAlCarrito)
                    .addComponent(spinnerCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(102, Short.MAX_VALUE))
        );

        tblCarrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblCarrito);

        lblTotalAPagar.setText("Total Apagar:");

        btnFinalizarVenta.setText("Finalizar Venta");
        btnFinalizarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarVentaActionPerformed(evt);
            }
        });

        btnQuitarProducto.setText("Quitar Producto");
        btnQuitarProducto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitarProductoActionPerformed(evt);
            }
        });

        btnCancelarVenta.setText("Cancelar Venta");
        btnCancelarVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarVentaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelTotalesLayout = new javax.swing.GroupLayout(PanelTotales);
        PanelTotales.setLayout(PanelTotalesLayout);
        PanelTotalesLayout.setHorizontalGroup(
            PanelTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelTotalesLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(lblTotalAPagar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 360, Short.MAX_VALUE)
                .addGroup(PanelTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCancelarVenta)
                    .addComponent(btnQuitarProducto)
                    .addComponent(btnFinalizarVenta))
                .addGap(224, 224, 224))
        );
        PanelTotalesLayout.setVerticalGroup(
            PanelTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTotalesLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(PanelTotalesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFinalizarVenta)
                    .addComponent(lblTotalAPagar))
                .addGap(26, 26, 26)
                .addComponent(btnQuitarProducto)
                .addGap(30, 30, 30)
                .addComponent(btnCancelarVenta)
                .addContainerGap(134, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(PanelAgregarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addComponent(PanelTotales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelAgregarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(PanelTotales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarAlCarritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarAlCarritoActionPerformed
        // TODO add your handling code here:
        
        // 1. Obtener el producto seleccionado y la cantidad
        Producto productoSeleccionado = (Producto) cmbProductos.getSelectedItem();
        int cantidad = (int) spinnerCantidad.getValue();

        // 2. Validaciones
        if (productoSeleccionado == null) {
            JOptionPane.showMessageDialog(this, "Por favor, seleccione un producto.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (cantidad <= 0) {
            JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor a cero.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (productoSeleccionado.getStock() < cantidad) {
            JOptionPane.showMessageDialog(this, "Stock insuficiente. Stock actual: " + productoSeleccionado.getStock(), "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 3. Calcular subtotal y agregar a la tabla
        double subtotal = productoSeleccionado.getPrecioVenta() * cantidad;
        Object[] fila = {
            productoSeleccionado.getId(),
            productoSeleccionado.getNombre(),
            cantidad,
            productoSeleccionado.getPrecioVenta(),
            subtotal
        };
        modeloTablaCarrito.addRow(fila);
        
        // 4. Actualizar el total a pagar
        actualizarTotal();
    }//GEN-LAST:event_btnAgregarAlCarritoActionPerformed

    private void btnQuitarProductoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitarProductoActionPerformed
        // TODO add your handling code here:
       int filaSeleccionada = tblCarrito.getSelectedRow();
        if (filaSeleccionada >= 0) {
            modeloTablaCarrito.removeRow(filaSeleccionada);
            actualizarTotal(); // Recalculamos el total
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione un producto del carrito para quitar.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_btnQuitarProductoActionPerformed

    private void btnFinalizarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarVentaActionPerformed
        if (tblCarrito.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "El carrito está vacío. Agregue productos para vender.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }


        if (usuario == null) {
            JOptionPane.showMessageDialog(this, "Error al identificar al usuario. Intente nuevamente.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        int idCliente;
        int idVendedor;

        if (usuario.getTipo().equalsIgnoreCase("cliente")) {
            idCliente = usuario.getId();
            idVendedor = 2; // VENDEDOR WEB
        } else {
            idVendedor = usuario.getId();
            idCliente = 1;         }

        // 2. Crear lista de detalles
        List<DetalleVenta> listaDetalles = new ArrayList<>();

        for (int i = 0; i < tblCarrito.getRowCount(); i++) {
            Object idObj = tblCarrito.getValueAt(i, 0);
            Object cantidadObj = tblCarrito.getValueAt(i, 2);

            int idProducto = (idObj instanceof Integer) ? (Integer) idObj : Integer.parseInt(idObj.toString());
            int cantidad = (cantidadObj instanceof Integer) ? (Integer) cantidadObj : Integer.parseInt(cantidadObj.toString());

            Producto producto = buscarProductoEnLista(idProducto);
            if (producto != null) {
                listaDetalles.add(new DetalleVenta(producto, cantidad));
            } else {
                JOptionPane.showMessageDialog(this, "No se encontró el producto con ID " + idProducto, "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (listaDetalles.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No se pudo construir la lista de productos para vender.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
                JOptionPane.showMessageDialog(this, "true","Resultado de la Venta", JOptionPane.INFORMATION_MESSAGE);

        String resultado = control.realizarVenta(idVendedor, idCliente, listaDetalles);
        JOptionPane.showMessageDialog(this, resultado, "Resultado de la Venta", JOptionPane.INFORMATION_MESSAGE);

        if (resultado.contains("éxito")) {
            limpiarVenta();
        }
    }//GEN-LAST:event_btnFinalizarVentaActionPerformed

    private void btnCancelarVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarVentaActionPerformed
        // TODO add your handling code here:
        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Estas seguro de que quieres cancelar?");
        if (confirmacion == JOptionPane.YES_OPTION){
            limpiarVenta();
        }
    }//GEN-LAST:event_btnCancelarVentaActionPerformed

  private void cargarProductosComboBox() {
    cmbProductos.removeAllItems(); // limpiar
    List<Producto> productos = control.traerProductos();
    for (Producto p : productos) {
        cmbProductos.addItem(p);
    }
}

  
    
    private void prepararTablaCarrito() {
        modeloTablaCarrito = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        String titulos[] = {"ID", "Producto", "Cantidad", "Precio Unit.", "Subtotal"};
        modeloTablaCarrito.setColumnIdentifiers(titulos);
        tblCarrito.setModel(modeloTablaCarrito);
    }
    
    private void actualizarTotal() {
        double total = 0.0;
        for (int i = 0; i < tblCarrito.getRowCount(); i++) {
            total += (double) tblCarrito.getValueAt(i, 4); // Sumamos la columna de subtotal
        }
        lblTotalAPagar.setText(String.format("S/ %.2f", total));
    }
    
    private void limpiarVenta() {
        // Limpiamos la tabla
        modeloTablaCarrito.setRowCount(0);
        // Reseteamos el total
        lblTotalAPagar.setText("S/ 0.00");
        // Reseteamos el spinner
        spinnerCantidad.setValue(0);
        // Reseteamos el ComboBox
        cmbProductos.setSelectedIndex(-1);
    }

    private Producto buscarProductoEnLista(int id) {
        for (Producto p : control.traerProductos()) {
            if (p.getId() == id) {
                return p;
            }
        }
        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelAgregarProducto;
    private javax.swing.JPanel PanelTotales;
    private javax.swing.JButton btnAgregarAlCarrito;
    private javax.swing.JButton btnCancelarVenta;
    private javax.swing.JButton btnFinalizarVenta;
    private javax.swing.JButton btnQuitarProducto;
    private javax.swing.JComboBox<capaDatos.Producto> cmbProductos;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTotalAPagar;
    private javax.swing.JSpinner spinnerCantidad;
    private javax.swing.JTable tblCarrito;
    // End of variables declaration//GEN-END:variables
}
